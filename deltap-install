#!/bin/bash

getopt --test > /dev/null
if [[ $? != 4 ]]; then
    echo "Iâ€™m sorry, `getopt --test` failed in this environment."
    exit 1
fi

show_help() {
cat << EOF
Usage: ${0##*/} [-v] [-w|--rewrite] [-d|--dev] [-r|--repo <repository>]  [[-t|--tag] | [-b|--branch] | [-c|--commit] <version>] [-o|--output <dir>]
Install selected version from tag/branch/commit.

    -h --help           display this help and exit
    -t --tag            version is tag
    -b --branch         version is branch HEAD
    -c --commit         version is commit hash    
    -r|--repo			git repository
    -w|--rewrite		clear output dir if exist
    -o|--output			path to install folder
    -d|--dev			install in development mode
    -v --verbose        verbose mode.
EOF
}

debug() {
	if [[ $VERBOSE == 1 ]]; then
		echo $1
	fi
}

SHORT=hvt:b:c:r:o:,w,d
LONG=help,verbose,tag:,branch:,commit:,repo:,output:,rewrite,dev

PARSED=$(getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@")
if [[ $? != 0 ]]; then
    exit 2
fi

eval set -- "$PARSED"

SOURCE_VERSION="branch"
VERSION="master"
REPO="https://github.com/DeltaPHP/DeltaApp.git"
DIR="/var/www/deltapp.dev/"
REWRITE=0
VERBOSE=0
DEV=0


while true; do
    case "$1" in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--verbose)
            VERBOSE=1
            shift
            ;;
        -t|--tag)
            SOURCE_VERSION="tag"
            VERSION="$2"
            shift 2
            ;;
        -b|--branch)
            SOURCE_VERSION="branch"
            VERSION="$2"
            shift 2
            ;;
        -c|--commit)
            SOURCE_VERSION="commit"
            VERSION="$2"
            shift 2
            ;;
        -r|--repo)
            REPO="$2"
            shift 2
            ;;
		-o|--output)
            DIR="$2"
            shift 2
            ;;
        -w|--rewrite)
            REWRITE=1
            shift 1
            ;;
        -d|--dev)
            DEV=1
            shift 1
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error" >&2
            exit 3
            ;;
    esac
done

debug "try to install $SOURCE_VERSION: $VERSION from: $REPO to: $DIR"

if [ -d $DIR ]; then
	if [ "$(ls -A $DIR) 2>/dev/null" ]; then
		if [[ $REWRITE == 1 ]]; then
			debug "clear not empty $DIR"
			rm -Rf $DIR
		else 
			echo "Target dir $DIR not empty" >&2
			exit 1;
		fi
	fi
fi

if [[ $VERBOSE == 1 ]]; then
	CMD_ADD="-v"
else
	CMD_ADD="-q"
fi

git clone $CMD_ADD $REPO $DIR

CMD_ADD=""

debug "cd $DIR"

cd $DIR

case $SOURCE_VERSION in
	tag)
		#check tags
		debug "git tag | grep $VERSION"
		git tag | grep $VERSION > /dev/null
		rc=$?; 
		if [[ $rc != 0 ]]; then
			echo "tag $VERSION not exist" >&2
			#rm -Rf $DIR
			exit $rc
		fi
			
		TAG=$(git describe --exact-match --abbrev=0 --tags 2>/dev/null)
		if [[ $VERSION != $TAG ]]; then
			debug "git checkout $VERSION"
			git checkout -q $VERSION
		fi
		;;
	branch)		
		#check branch
		debug "git branch -r | grep \"$VERSION\""
		git branch -r | grep $VERSION > /dev/null 2>&1
		rc=$?; 
		if [[ $rc != 0 ]]; then
			echo "branch $VERSION not exist" >&2
			rm -Rf $DIR
			exit $rc
		fi 
		
		BRANCH=$(git branch | grep "*" | awk '{print($2)}' 2>/dev/null)
		if [[ $VERSION != $BRANCH ]]; then
			debug "git checkout -t origin/$VERSION"
			git checkout -t origin/$VERSION
		fi
		;;
	commit)
		#check commit
		debug "git log --pretty=oneline | grep $VERSION"
		git log --pretty=oneline | grep $VERSION > /dev/null 2>&1
		rc=$?; 
		if [[ $rc != 0 ]]; then
			echo "commit $VERSION not exist" >&2
			rm -Rf $DIR
			exit $rc
		fi
		git checkout $version
		;;
esac

if [[ $VERBOSE == 1 ]]; then
	CMD_ADD="-v "
else
	CMD_ADD="-q "
fi

debug "composer $CMD_ADD global require \"fxp/composer-asset-plugin:~1.1\"" 

#COMPOSER_DISABLE_XDEBUG_WARN=1 composer $CMD_ADD global require "fxp/composer-asset-plugin:~1.1"

if [[ $DEV == 1 ]]; then
	CMD_ADD="$CMD_ADD --prefer-source"
else
	CMD_ADD="$CMD_ADD --prefer-dist --no-dev -o"
fi

debug "composer install -n $CMD_ADD"
#COMPOSER_DISABLE_XDEBUG_WARN=1 composer install -n $CMD_ADD

rc=$?; 
if [[ $rc != 0 ]]; then
	echo "composer error" >&2
	rm -Rf $DIR
	exit $rc
fi

if [[ $VERBOSE == 1 ]]; then
	echo "Done"
fi

if [ -f "$DIR/bin/console.php" ]; then
	chmod u+x $DIR/bin/console.php
	if [[ $VERBOSE == 1 ]]; then
		echo "For inicialize project run:  \n$DIR/bin/console.php"
	fi
fi
